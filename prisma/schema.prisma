datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  loginLogs     LoginLog[]
  documents     Document[]
  folders       Folder[]  @relation("UserToFolder")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())
  success   Boolean
  ipAddress String?
  userAgent String?  @db.Text

  @@index([userId])
  @@index([timestamp])
}

model Folder {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  parentId  String?
  parent    Folder?    @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: SetNull)
  children  Folder[]   @relation("FolderToFolder")
  documents Document[]
  user      User       @relation("UserToFolder", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([parentId])
}

model Document {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  fileName    String   // The actual filename in R2
  size        Int      // File size in bytes
  type        String   // MIME type
  url         String?  // Optional R2 URL
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  folderId    String?
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([folderId])
} 