datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  loginLogs     LoginLog[]
  documents     Document[]
  folders       Folder[]  @relation("UserToFolder")
  cases         Case[]
  notes         Note[]
  tasks         Task[]
  clients       Client[]
  clientNotes   ClientNote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())
  success   Boolean
  ipAddress String?
  userAgent String?  @db.Text

  @@index([userId])
  @@index([timestamp])
}

model Folder {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  parentId  String?
  parent    Folder?    @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: SetNull)
  children  Folder[]   @relation("FolderToFolder")
  documents Document[]
  user      User       @relation("UserToFolder", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([parentId])
}

model Document {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  fileName    String   // The actual filename in R2
  size        Int      // File size in bytes
  type        String   // MIME type
  url         String?  // Optional R2 URL
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  folderId    String?
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
  caseId      String?
  case        Case?    @relation(fields: [caseId], references: [id], onDelete: SetNull)
  clientId    String?
  client      Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)
  textContent String? @db.Text
  
  @@index([userId])
  @@index([folderId])
  @@index([caseId])
  @@index([clientId])
}

enum CaseStatus {
  ACTIVE
  PENDING
  CLOSED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum PartyType {
  PLAINTIFF
  DEFENDANT
  WITNESS
  EXPERT
  COUNSEL
  OTHER
}

model Case {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  status      CaseStatus  @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId    String?
  client      Client?     @relation(fields: [clientId], references: [id], onDelete: SetNull)
  documents   Document[]
  notes       Note[]
  tasks       Task[]
  parties     Party[]

  @@index([userId])
  @@index([clientId])
}

model Note {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  caseId    String
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([userId])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  status      TaskStatus @default(TODO)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  caseId      String
  case        Case       @relation(fields: [caseId], references: [id], onDelete: Cascade)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([userId])
}

model Party {
  id          String    @id @default(cuid())
  name        String
  type        PartyType
  email       String?
  phone       String?
  address     String?   @db.Text
  notes       String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  caseId      String
  case        Case      @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
}

model Client {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  email       String?
  phone       String?
  address     String?   @db.Text
  notes       String?   @db.Text
  company     String?
  status      ClientStatus @default(ACTIVE)
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cases       Case[]
  documents   Document[]
  clientNotes ClientNote[]

  @@index([userId])
}

model ClientNote {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  LEAD
  FORMER
} 

